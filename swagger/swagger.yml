swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Url http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /status/:
    get:
      tags:
      - status
      description: get Task Status
      operationId: TaskStatusController.Get All
      parameters:
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/TaskStatus'
        "403": {}
    post:
      tags:
      - status
      description: Create Task Task
      operationId: TaskStatusController.Create Task Status
      parameters:
      - in: body
        name: body
        description: body for Task  Status content
        required: true
        schema:
          $ref: '#/definitions/TaskStatus'
      responses:
        "200":
          description: '{int} models.TaskStatus.Id'
        "403":
          description: body is empty
  /status/{id}:
    get:
      tags:
      - status
      description: get Task Status by id
      operationId: TaskStatusController.Get Detail Status
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/TaskStatus'
        "403":
          description: :id is empty
    put:
      tags:
      - status
      description: update the Task Status
      operationId: TaskStatusController.Update
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Task content
        required: true
        schema:
          $ref: '#/definitions/TaskStatus'
      responses:
        "200":
          schema:
            $ref: '#/definitions/TaskStatus'
        "403":
          description: :id is not int
    delete:
      tags:
      - status
      description: delete the Task
      operationId: TaskStatusController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /tasks/:
    get:
      tags:
      - tasks
      description: get Task
      operationId: TaskController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/Task'
        "403": {}
    post:
      tags:
      - tasks
      description: Create Task
      operationId: TaskController.Create Task
      parameters:
      - in: body
        name: body
        description: body for Task content
        required: true
        schema:
          $ref: '#/definitions/Task'
      responses:
        "200":
          description: '{int} models.Task.Id'
        "403":
          description: body is empty
  /tasks/{id}:
    get:
      tags:
      - tasks
      description: get Task by id
      operationId: TaskController.Get
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/Task'
        "403":
          description: :id is empty
    put:
      tags:
      - tasks
      description: update the Task
      operationId: TaskController.Update
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Task content
        required: true
        schema:
          $ref: '#/definitions/Task'
      responses:
        "200":
          schema:
            $ref: '#/definitions/Task'
        "403":
          description: :id is not int
    delete:
      tags:
      - tasks
      description: delete the Task
      operationId: TaskController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /users/:
    get:
      tags:
      - users
      description: Get All User
      operationId: UserController.Get All User
      parameters:
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/User'
        "403": {}
    post:
      tags:
      - users
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /users/{id}:
    get:
      tags:
      - users
      description: get User by id
      operationId: UserController.Get Detail of User
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/User'
        "403":
          description: :id is empty
    put:
      tags:
      - users
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: body for Task content
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          schema:
            $ref: '#/definitions/User'
        "403":
          description: :id is not int
    delete:
      tags:
      - users
      description: delete user
      operationId: UserController.Delete User
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  Task:
    title: Task
    type: object
    properties:
      Created:
        $ref: '#/definitions/&{time Time}'
      Description:
        type: string
      Id:
        type: integer
        format: int64
      Name:
        type: string
      Parent:
        $ref: '#/definitions/Task'
      Priority:
        type: integer
        format: int64
      Status:
        $ref: '#/definitions/TaskStatus'
      Updated:
        $ref: '#/definitions/&{time Time}'
  TaskStatus:
    title: TaskStatus
    type: object
    properties:
      Id:
        type: integer
        format: int64
      Label:
        type: string
      Name:
        type: string
      Task:
        $ref: '#/definitions/Task'
  User:
    title: User
    type: object
    properties:
      Address:
        type: string
      Contact:
        type: string
      Created:
        $ref: '#/definitions/&{time Time}'
      Email:
        type: string
      Id:
        type: integer
        format: int64
      Name:
        type: string
      Password:
        type: string
      Username:
        type: string
tags:
- name: users
  description: |
    User
- name: status
  description: |
    Status Task
- name: tasks
  description: |
    Task
